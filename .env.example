# Shepherd Configuration Management System - Environment Variables
# Copy this file to .env and configure the values for your environment

# ======================================================================
# MongoDB Configuration
# ======================================================================
# MongoDB connection URI (used by database.py)
# Format: mongodb://[username:password@]host[:port]/[database][?options]
MONGODB_URI=mongodb://localhost:27017/

# MongoDB database name (used by database.py)
DATABASE_NAME=shepherd_cms

# Legacy individual MongoDB settings (for reference/alternative configuration)
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_DATABASE=shepherd

# MongoDB Authentication (recommended for production)
MONGODB_USERNAME=
MONGODB_PASSWORD=

# MongoDB Connection Options (production settings)
# MONGODB_AUTH_SOURCE=admin
# MONGODB_REPLICA_SET=
# MONGODB_SSL=false
# MONGODB_SSL_CERT_REQS=CERT_REQUIRED
# MONGODB_SSL_CA_CERTS=
# MONGODB_SSL_CERTFILE=
# MONGODB_SSL_KEYFILE=
# MONGODB_CONNECT_TIMEOUT_MS=20000
# MONGODB_SERVER_SELECTION_TIMEOUT_MS=30000

# ======================================================================
# Flask Application Configuration
# ======================================================================
FLASK_ENV=development
FLASK_DEBUG=True

# Application Settings
PORT=5000
HOST=0.0.0.0

# Security Settings (IMPORTANT: Change in production)
SECRET_KEY=your-secret-key-change-in-production
FLASK_SECRET_KEY=your-flask-secret-key-change-in-production

# ======================================================================
# Docker-Specific Configuration
# ======================================================================
# When running with Docker Compose, use these settings:

# MongoDB Docker Configuration
# MONGODB_HOST=shepherd-mongo
# MONGODB_USERNAME=shepherd_user
# MONGODB_PASSWORD=shepherd_password123

# Production MongoDB Docker Configuration (⚠️ CHANGE THESE PASSWORDS)
# MONGO_INITDB_ROOT_USERNAME=admin
# MONGO_INITDB_ROOT_PASSWORD=admin_password123
# MONGODB_USERNAME=shepherd_user
# MONGODB_PASSWORD=shepherd_password123

# ======================================================================
# Production Environment Variables
# ======================================================================
# For production deployment, ensure you set:
# FLASK_ENV=production
# FLASK_DEBUG=False
# SECRET_KEY=<strong-random-secret-key>
# FLASK_SECRET_KEY=<strong-random-secret-key>

# ======================================================================
# Logging Configuration
# ======================================================================
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# Application Logging
# LOG_FILE=shepherd.log
# LOG_MAX_SIZE=10485760  # 10MB
# LOG_BACKUP_COUNT=5

# ======================================================================
# Performance and Scaling
# ======================================================================
# Gunicorn Configuration (when running with Docker)
GUNICORN_WORKERS=4
GUNICORN_TIMEOUT=120
GUNICORN_KEEPALIVE=2
GUNICORN_MAX_REQUESTS=1000
GUNICORN_MAX_REQUESTS_JITTER=50

# MongoDB Connection Pool
MONGODB_MAX_POOL_SIZE=50
MONGODB_MIN_POOL_SIZE=5

# ======================================================================
# Security Headers and CORS
# ======================================================================
# CORS_ORIGINS=https://yourdomain.com,https://api.yourdomain.com
# CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
# CORS_ALLOW_HEADERS=Content-Type,Authorization

# Security Headers
# SECURITY_CONTENT_SECURITY_POLICY=default-src 'self'
# SECURITY_X_CONTENT_TYPE_OPTIONS=nosniff
# SECURITY_X_FRAME_OPTIONS=DENY
# SECURITY_X_XSS_PROTECTION=1; mode=block

# ======================================================================
# Health Check Configuration
# ======================================================================
HEALTH_CHECK_ENDPOINT=/api/health
HEALTH_CHECK_MONGODB=true

# ======================================================================
# Phase 9: Observability & Integration Configuration
# ======================================================================

# Structured Logging Configuration
LOG_FORMAT=json
LOG_LEVEL=INFO
LOG_FILE=
LOG_TO_CONSOLE=True
LOG_REQUEST_ID=True
LOG_USER_CONTEXT=True

# Prometheus Metrics Configuration
METRICS_ENABLED=True
METRICS_PATH=/metrics
METRICS_UPDATE_INTERVAL=60

# Webhook Integration Configuration
WEBHOOK_ENABLED=True
WEBHOOK_URLS=
WEBHOOK_SECRET=
WEBHOOK_EVENTS=config.created,config.updated,config.rolled_back
WEBHOOK_TIMEOUT=10
WEBHOOK_RETRY_ATTEMPTS=3
WEBHOOK_RETRY_DELAY=1

# Log Forwarding Examples (for production)
# ELK Stack: Configure log shipping to Elasticsearch/Logstash
# Splunk: Configure HTTP Event Collector (HEC)
# Datadog: Configure log forwarding agent
# CloudWatch: Configure awslogs driver or agent

# Prometheus Scraping Examples (for production)
# Add Shepherd as a target in prometheus.yml:
# - job_name: 'shepherd'
#   static_configs:
#     - targets: ['shepherd:5000']
#   metrics_path: '/metrics'

# Webhook Examples (for production)
# WEBHOOK_URLS=https://hooks.slack.com/services/...,https://api.example.com/webhooks
# WEBHOOK_SECRET=your-webhook-signing-secret
# WEBHOOK_EVENTS=config.created,config.updated

# ======================================================================
# Development vs Production Checklist
# ======================================================================

# Development Environment:
# ✓ FLASK_ENV=development
# ✓ FLASK_DEBUG=True
# ✓ MONGODB_HOST=localhost (or shepherd-mongo for Docker)
# ✓ Weak passwords are acceptable
# ✓ Detailed error messages

# Production Environment Checklist:
# ✅ FLASK_ENV=production
# ✅ FLASK_DEBUG=False
# ✅ Strong SECRET_KEY and FLASK_SECRET_KEY
# ✅ Strong MongoDB passwords
# ✅ MONGODB_USERNAME and MONGODB_PASSWORD set
# ✅ LOG_LEVEL=WARNING or ERROR
# ✅ LOG_FORMAT=json for structured logging
# ✅ METRICS_ENABLED=True for monitoring
# ✅ WEBHOOK_URLS configured for notifications
# ✅ WEBHOOK_SECRET set for secure webhook delivery
# ✅ CORS_ORIGINS configured if needed
# ✅ Security headers configured
# ✅ SSL/TLS certificates in place
# ✅ Firewall rules configured
# ✅ Backup strategy implemented
# ✅ Monitoring and alerting setup (Prometheus/Grafana)
# ✅ Log aggregation setup (ELK/Splunk/CloudWatch)

# ======================================================================
# Environment-Specific Examples
# ======================================================================

# Local Development:
# MONGODB_HOST=localhost
# FLASK_DEBUG=True
# LOG_LEVEL=DEBUG

# Docker Development:
# MONGODB_HOST=shepherd-mongo
# FLASK_DEBUG=True
# LOG_LEVEL=DEBUG

# Docker Production:
# MONGODB_HOST=shepherd-mongo
# FLASK_ENV=production
# FLASK_DEBUG=False
# LOG_LEVEL=WARNING
# SECRET_KEY=<generate-strong-key>
# FLASK_SECRET_KEY=<generate-strong-key>
# MONGODB_PASSWORD=<strong-password>